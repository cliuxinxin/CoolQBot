# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# master 分支和所有的 tags 都能触发
trigger:
  branches:
    include:
    - master
    - refs/tags/*

jobs:
- job: 'Build'
  pool:
    vmImage: 'Ubuntu-16.04'

  variables:
    imageName: 'coolqbot'

    DOCKER_BUILDKIT: 1

    # buildkit tool itself
    BUILD_KIT_CACHE: '$(Pipeline.Workspace)/buildkitcache'
    BUILDKIT_COMMIT: 10cef0c6e178bcaca1ad02b041a96b1091f52071
    BUILDKIT_CACHE_KEY: GOOFS=0 | buildkit | $(BUILDKIT_COMMIT)

    DOCKER_COMMAND: 'buildctl build --frontend=dockerfile.v0 --local context=. --local dockerfile=.'
    CACHE_KEY_SALT: 2
    CACHE_KEY_BUILDKIT: '"DOCKER_BUILDKIT=$(DOCKER_BUILDKIT)" | "BUILDKIT_COMMIT=$(BUILDKIT_COMMIT)"'
    CACHE_KEY_FALLBACK: '"CACHE_KEY_SALT=$(CACHE_KEY_SALT)" | "$(Agent.OS) $(Agent.JobName)" | $(CACHE_KEY_BUILDKIT) | "$(DOCKER_COMMAND)"'
    CACHE_KEY_EXACT: '$(CACHE_KEY_FALLBACK) | $(System.DefaultWorkingDirectory)/Dockerfile,$(System.DefaultWorkingDirectory)/Cargo.*'

  steps:
    # Build/restore the BuildKit tool
  - task: CacheBeta@0
    inputs:
      key: $(BUILDKIT_CACHE_KEY)
      path: '$(System.DefaultWorkingDirectory)/buildkit'
      cacheHitVar: 'BuildKitToolHit'
    displayName: 'cache buildkit tool'

  - script: |
      git clone https://github.com/moby/buildkit.git
      cd buildkit
      git checkout $(BUILDKIT_COMMIT)
      make
    displayName: "Build BuildKit on cache miss"
    condition: and(succeeded(), ne(variables['BuildKitToolHit'], 'true'))

  - script: |
      cd buildkit
      sudo make install
      which buildctl
      which buildkitd

  # restore the BuildKit cache based on the Dockerfile ...
  - task: CacheBeta@0
    inputs:
      key: $(CACHE_KEY_EXACT)
      path: '$(BUILD_KIT_CACHE)'
      cacheHitVar: 'BuildKitLayersHit'
      restoreKeys: |
        $(CACHE_KEY_FALLBACK)
    displayName: 'cache docker layers'

  - bash: echo '##vso[task.setvariable variable=imageTag]test'
    condition: eq(variables['Build.Reason'], 'PullRequest')
    displayName: 'set imageTag to test'

  - bash: echo '##vso[task.setvariable variable=imageTag]latest'
    condition: contains(variables['Build.SourceBranch'], 'master')
    displayName: 'set imageTag to latest'

  - bash: |
      tag=`echo $(Build.SourceBranch) | grep -P 'v([0-9.]+)' -o`
      echo '##vso[task.setvariable variable=imageTag]'$tag
    condition: contains(variables['Build.SourceBranch'], 'tags')
    displayName: 'set imageTag to tags'

  - script: |
      set -e -x
      sudo buildkitd --debug --root /var/lib/buildkit &

      until sudo buildctl du -v
      do
        echo "Waiting for daemon to load"
        sleep 1
      done

      DOCKER_COMMAND="$(DOCKER_COMMAND)"

      if [ -d "$(BUILD_KIT_CACHE)" ]; then
        echo "Will use cached layers from $(BUILD_KIT_CACHE)"
        find $(BUILD_KIT_CACHE)
        DOCKER_COMMAND="$DOCKER_COMMAND --import-cache type=local,src=$(BUILD_KIT_CACHE)"
      fi

      if [ "$(BuildKitLayersHit)" != "true" ]; then
        echo "Will store cached layers to $(BUILD_KIT_CACHE)"
        DOCKER_COMMAND="$DOCKER_COMMAND --export-cache mode=max,type=local,dest=$(BUILD_KIT_CACHE)"
      fi

      sudo $DOCKER_COMMAND --opt target=$(dockerId)/$(imageName):$(imageTag)

      find $(BUILD_KIT_CACHE)

      sudo kill -9 $(jobs -p)
    displayName: 'docker build'

  - bash: |
      docker login -u $(dockerId) -p $(pswd)
      docker push $(dockerId)/$(imageName):$(imageTag)
    displayName: 'docker push'

  - bash: |
      echo $(Build.SourceBranch)
      echo $(Build.Reason)
      echo imageTag=$(imageTag) > imageTag
    displayName: 'print some variables'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/imageTag'
      artifactName: 'imageTag'
    displayName: 'save imageTag'
